// Chemfiles, a modern library for chemistry file reading and writing
// Copyright (C) Guillaume Fraux and contributors -- BSD license
#include "catch.hpp"
#include "helpers.hpp"
#include "chemfiles.hpp"

#ifndef CHFL_DISABLE_GEMMI

using namespace chemfiles;

TEST_CASE("Read files in CIF format") {
    SECTION("Read single step") {
        auto file = Trajectory("data/cif/1544173.cif", 'r', "CIF");
        Frame frame = file.read();

        CHECK(frame.size() == 100);
        CHECK(frame.get("name")->as_string() == "1544173");

        // Check reading positions
        auto positions = frame.positions();
        CHECK(approx_eq(positions[0], Vector3D(-0.428, 5.427, 11.536), 1e-3));
        CHECK(approx_eq(positions[1], Vector3D(4.634, 11.178, 0.405), 1e-3));
        CHECK(frame[0].name() == "O1");
        CHECK(frame[0].type() == "O");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 8);
        CHECK(frame[1].name() == "O1");
        CHECK(frame[1].type() == "O");
        CHECK(frame[1].get("occupancy")->as_double() == 1.0);
        CHECK(frame[1].get("atomic_number")->as_double() == 8);

        // Check the unit cell
        auto cell = frame.cell();
        CHECK(approx_eq(cell.lengths(), {5.9170, 11.5030, 12.0635}, 1e-4));
        CHECK(approx_eq(cell.angles(), {90.0, 98.153, 90.0}, 1e-4));
    }

    SECTION("Check nsteps and read frame by frame") {
        auto file = Trajectory("data/cif/Zr-UiO-66-pressure.cif", 'r', "CIF");
        CHECK(file.size() == 3);

        Frame frame = file.read();
        CHECK(approx_eq(frame.cell().lengths(), {20.721205, 20.721205, 20.721205}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].type() == "C");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.124, 14.561, 4.200), 1e-3));

        frame = file.read();
        CHECK(approx_eq(frame.cell().lengths(), {20.561233, 20.561233, 20.561233}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.159, 4.170, 14.451), 1e-3));

        frame = file.read();
        CHECK(approx_eq(frame.cell().lengths(), {20.415146, 20.415146, 20.415146}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.220, 4.142, 14.350), 1e-3));
    }

    SECTION("Read specific frame") {
        auto file = Trajectory("data/cif/Zr-UiO-66-pressure.cif", 'r', "CIF");
        CHECK(file.size() == 3);

        auto frame = file.read_at(1);
        CHECK(approx_eq(frame.cell().lengths(), {20.561233, 20.561233, 20.561233}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].type() == "C");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.159, 4.170, 14.451), 1e-3));

        frame = file.read_at(0);
        CHECK(approx_eq(frame.cell().lengths(), {20.721205, 20.721205, 20.721205}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].type() == "C");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.124, 14.561, 4.200), 1e-3));

        frame = file.read_at(2);
        CHECK(approx_eq(frame.cell().lengths(), {20.415146, 20.415146, 20.415146}, 1e-6));
        CHECK(frame[0].name() == "C1");
        CHECK(frame[0].type() == "C");
        CHECK(frame[0].get("occupancy")->as_double() == 1.0);
        CHECK(frame[0].get("atomic_number")->as_double() == 6);
        CHECK(approx_eq(frame.positions()[0], Vector3D(0.220, 4.142, 14.350), 1e-3));
    }

    SECTION("Read a COD file") {
        auto file = Trajectory("data/cif/1544173.cif");
        REQUIRE(file.size() == 1);

        auto frame = file.read();
        CHECK(frame.size() == 100);

        auto positions = frame.positions();
        CHECK(approx_eq(positions[0], Vector3D(-0.428, 5.427, 11.536), 1e-3));
        CHECK(approx_eq(positions[20],Vector3D(2.507, 4.442, 8.863), 1e-3));
    }
}

TEST_CASE("Write CIF file") {
    auto tmpfile = NamedTempPath(".cif");
    const auto* EXPECTED_CONTENT =
    "data_model_0\n"
    "_audit_creation_method         'generated by Chemfiles'\n"
    "_symmetry_cell_setting         'triclinic'\n"
    "_symmetry_space_group_name_H-M 'P 1'\n"
    "_space_group_IT_number         1\n"
    "_cell_length_a 22.0000\n"
    "_cell_length_b 22.0000\n"
    "_cell_length_c 22.0000\n"
    "_cell_angle_alpha 90.0000\n"
    "_cell_angle_beta  90.0000\n"
    "_cell_angle_gamma 90.0000\n"
    "loop_\n"
    "  _symmetry_equiv_pos_as_xyz\n"
    "  '+x,+y,+z'\n"
    "\n"
    "loop_\n"
    "_atom_site_label\n"
    "_atom_site_type_symbol\n"
    "_atom_site_occupancy\n"
    "_atom_site_fract_x\n"
    "_atom_site_fract_y\n"
    "_atom_site_fract_z\n"
    "_atom_site_Cartn_x\n"
    "_atom_site_Cartn_y\n"
    "_atom_site_Cartn_z\n"
    "Si Si 1.0  0.0454545  0.0909091  0.1363636  1.00000  2.00000  3.00000\n"
    "C C 1.0  0.0909091  0.1363636  0.1818182  2.00000  3.00000  4.00000\n";

    auto frame = Frame(UnitCell({22, 22, 22}));
    frame.add_atom(Atom("Si"), {1, 2, 3});
    frame.add_atom(Atom("C"), {2, 3, 4});

    auto file = Trajectory(tmpfile, 'w');
    file.write(frame);
    file.close();

    auto content = read_text_file(tmpfile);
    CHECK(EXPECTED_CONTENT == content);
}

#endif
